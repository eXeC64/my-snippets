priority -50

snippet if "if statement"
if(${1:condition})
{
	${2:${VISUAL}}
}
${0}
endsnippet

snippet elif "else if clause"
else if(${1:condition})
{
	${2:${VISUAL}}
}
${0}
endsnippet

snippet el "else clause"
else
{
	${1:${VISUAL}}
}
endsnippet

snippet it "Iterate over a container (short version)"
for(auto ${1:val} : ${2:container})
{
	${0:${VISUAL}}
}
endsnippet

snippet iter "Iterate over a container"
for(auto ${1:it} = ${2:container}.begin(); $1 != $2.end(); ++$1)
{
	${0:${VISUAL}}
}
endsnippet

snippet for "for loop"
for(${1:int} ${2:i} = ${3:0}; $2 < ${4:10}; ++$2)
{
	${0:${VISUAL}}
}
endsnippet

snippet wh "while loop"
while(${1:condition})
{
	${2:${VISUAL}}
}
endsnippet

snippet try "try/catch block"
try
{
	${1:${VISUAL}}
}
catch(${2:const std::exception &e})
{
	${3}
}
endsnippet

snippet cl "class"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/} (${2:arguments});
	virtual ~${1/(\w+).*/$1/} ();

private:
	${0:/* data */}
};
endsnippet

snippet method "method function"
${1:void} ${2:`!p snip.rv = snip.basename or "name"`}::${3:methodName}(${4:/*parameters*/})
{
	${0:${VISUAL}}
}
endsnippet

snippet thr "throw exception"
throw std::runtime_error("${1}");
endsnippet

snippet cout "cout"
std::cout << ${1} << std::endl;
endsnippet

snippet str "std::string" w
std::string
endsnippet

snippet vec "std::vector" w
std::vector<${1:T}>
endsnippet

snippet map "std::map" w
std::map<${1:T1,T2}>
endsnippet

snippet set "std::set" w
std::set<${1:T}>
endsnippet

snippet sptr "shared pointer" w
boost::shared_ptr<${1:T}>
endsnippet

snippet dc "dynamic cast" w
dynamic_cast<${1:T}>(${2:${VISUAL}})
endsnippet

snippet sc "static cast" w
static_cast<${1:T}>(${2:${VISUAL}})
endsnippet

snippet bc "boost dynamic cast" w
boost::dynamic_pointer_cast<${1:T}>(${2:${VISUAL}})
endsnippet

snippet lc "boost lexical cast" w
boost::lexical_cast<${1:T}>(${2:${VISUAL}})
endsnippet

#Mantid specific stuff
snippet log "mantid logging"
g_log.${1:debug}() << ${2} << std::endl;
endsnippet

snippet strconv "convert a string"
Mantid::Kernel::Strings::convert<${3:T}>(${1:src}, ${2:dst});
endsnippet

#Common operations
snippet strsplit "split string"
boost::split(${1:dstVec}, ${2:srcString}, boost::is_any_of("${3:\n}"));
endsnippet

snippet strjoin "join a vector of strings"
boost::algorithm::join(${1:srcVec}, ${2:"\n"});
endsnippet
